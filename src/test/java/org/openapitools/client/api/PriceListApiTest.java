/*
 * PriceList Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import GeminiCommerce_Pricelist.ApiException;
import org.openapitools.client.model.PricelistCreatePriceListRequest;
import org.openapitools.client.model.PricelistCreatePriceListResponse;
import org.openapitools.client.model.PricelistDeletePriceListItemsRequest;
import org.openapitools.client.model.PricelistGetFullPriceItemsRequest;
import org.openapitools.client.model.PricelistGetFullPriceItemsResponse;
import org.openapitools.client.model.PricelistGetPriceItemsByPriceListItemIdsRequest;
import org.openapitools.client.model.PricelistGetPriceItemsByPriceListItemIdsResponse;
import org.openapitools.client.model.PricelistGetPriceListByCodeRequest;
import org.openapitools.client.model.PricelistGetPriceListByCodeResponse;
import org.openapitools.client.model.PricelistGetPriceListItemsRequest;
import org.openapitools.client.model.PricelistGetPriceListItemsResponse;
import org.openapitools.client.model.PricelistGetPriceListRequest;
import org.openapitools.client.model.PricelistGetPriceListResponse;
import org.openapitools.client.model.PricelistGetPricesRequest;
import org.openapitools.client.model.PricelistGetPricesResponse;
import org.openapitools.client.model.PricelistListFullPriceItemsRequest;
import org.openapitools.client.model.PricelistListFullPriceItemsResponse;
import org.openapitools.client.model.PricelistListPriceListsRequest;
import org.openapitools.client.model.PricelistListPriceListsResponse;
import org.openapitools.client.model.PricelistSetPriceListItemsRequest;
import org.openapitools.client.model.PricelistSetPriceListItemsResponse;
import org.openapitools.client.model.PricelistUpdatePriceListRequest;
import org.openapitools.client.model.RpcStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PriceListApi
 */
@Disabled
public class PriceListApiTest {

    private final PriceListApi api = new PriceListApi();

    /**
     * Create new list
     *
     * Allows the creation of a new price list with specified details such as code, name, currency, and type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPriceListTest() throws ApiException {
        PricelistCreatePriceListRequest body = null;
        PricelistCreatePriceListResponse response = api.createPriceList(body);
        // TODO: test validations
    }

    /**
     * Get prices for items
     *
     * Deletes specified items from a price list based on their unique identifiers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePriceListItemsTest() throws ApiException {
        PricelistDeletePriceListItemsRequest body = null;
        Object response = api.deletePriceListItems(body);
        // TODO: test validations
    }

    /**
     * List detailed items
     *
     * Fetches detailed information about items, including historical price data, for a specific price list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFullPriceItemsByPricelistIdTest() throws ApiException {
        PricelistGetFullPriceItemsRequest body = null;
        PricelistGetFullPriceItemsResponse response = api.getFullPriceItemsByPricelistId(body);
        // TODO: test validations
    }

    /**
     * Get specific list
     *
     * Returns information about a particular price list identified by tenant ID and price list ID. The response includes details such as code, name, currency, and type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPriceListTest() throws ApiException {
        PricelistGetPriceListRequest body = null;
        PricelistGetPriceListResponse response = api.getPriceList(body);
        // TODO: test validations
    }

    /**
     * Get list by code
     *
     * Retrieves information about a specific price list using the unique code associated with it. The response includes details such as code, name, currency, and type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPriceListByCodeTest() throws ApiException {
        PricelistGetPriceListByCodeRequest body = null;
        PricelistGetPriceListByCodeResponse response = api.getPriceListByCode(body);
        // TODO: test validations
    }

    /**
     * Get items in list
     *
     * Fetches a paginated list of items associated with a particular price list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPriceListItemsTest() throws ApiException {
        PricelistGetPriceListItemsRequest body = null;
        PricelistGetPriceListItemsResponse response = api.getPriceListItems(body);
        // TODO: test validations
    }

    /**
     * Get detailed items
     *
     * Retrieves the current prices of specified items considering the provided context, such as currency and market.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPricesItemsTest() throws ApiException {
        PricelistGetPricesRequest body = null;
        PricelistGetPricesResponse response = api.getPricesItems(body);
        // TODO: test validations
    }

    /**
     * List detailed price items for a specific price list
     *
     * Retrieves a paginated list of detailed price items, including historical data, for a specific price list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFullPriceItemsByPricelistIdTest() throws ApiException {
        PricelistListFullPriceItemsRequest body = null;
        PricelistListFullPriceItemsResponse response = api.listFullPriceItemsByPricelistId(body);
        // TODO: test validations
    }

    /**
     * List all price lists
     *
     * Retrieves a list of price lists based on optional filters such as name, code, and other attributes. The response includes details such as code, name, currency, and type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPriceListsTest() throws ApiException {
        PricelistListPriceListsRequest body = null;
        PricelistListPriceListsResponse response = api.listPriceLists(body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void priceListGetPriceItemsByPriceListItemIdsTest() throws ApiException {
        PricelistGetPriceItemsByPriceListItemIdsRequest body = null;
        PricelistGetPriceItemsByPriceListItemIdsResponse response = api.priceListGetPriceItemsByPriceListItemIds(body);
        // TODO: test validations
    }

    /**
     * Set items in list
     *
     * Updates or creates items for a given price list, allowing bulk modifications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setPriceListItemsTest() throws ApiException {
        PricelistSetPriceListItemsRequest body = null;
        PricelistSetPriceListItemsResponse response = api.setPriceListItems(body);
        // TODO: test validations
    }

    /**
     * Update list
     *
     * Modifies the attributes of an existing price list based on the provided payload and field mask. The field mask is used to specify which attributes of the price list are to be updated. The field mask is a comma-separated list of fully qualified names of fields. Example: &#x60;code,name,currency,type&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePriceListTest() throws ApiException {
        PricelistUpdatePriceListRequest body = null;
        Object response = api.updatePriceList(body);
        // TODO: test validations
    }

}
