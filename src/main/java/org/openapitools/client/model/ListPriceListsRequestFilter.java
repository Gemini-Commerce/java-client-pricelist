/*
 * PriceList Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PricelistChannelFilter;
import org.openapitools.client.model.PricelistCurrencyFilter;
import org.openapitools.client.model.PricelistMarketFilter;
import org.openapitools.client.model.PricelistPriceListTypeFilter;
import org.openapitools.client.model.PricelistSegmentFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce.Pricelist.JSON;

/**
 * ListPriceListsRequestFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-15T16:07:56.394094327Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class ListPriceListsRequestFilter {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_CURRENCY_FILTER = "currencyFilter";
  @SerializedName(SERIALIZED_NAME_CURRENCY_FILTER)
  private PricelistCurrencyFilter currencyFilter;

  public static final String SERIALIZED_NAME_VAT_INCLUDED = "vatIncluded";
  @SerializedName(SERIALIZED_NAME_VAT_INCLUDED)
  private Boolean vatIncluded;

  public static final String SERIALIZED_NAME_DELIVERED_DUTY_PAID = "deliveredDutyPaid";
  @SerializedName(SERIALIZED_NAME_DELIVERED_DUTY_PAID)
  private Boolean deliveredDutyPaid;

  public static final String SERIALIZED_NAME_SEGMENTS_FILTER = "segmentsFilter";
  @SerializedName(SERIALIZED_NAME_SEGMENTS_FILTER)
  private PricelistSegmentFilter segmentsFilter;

  public static final String SERIALIZED_NAME_MARKETS_FILTER = "marketsFilter";
  @SerializedName(SERIALIZED_NAME_MARKETS_FILTER)
  private PricelistMarketFilter marketsFilter;

  public static final String SERIALIZED_NAME_CHANNELS_FILTER = "channelsFilter";
  @SerializedName(SERIALIZED_NAME_CHANNELS_FILTER)
  private PricelistChannelFilter channelsFilter;

  public static final String SERIALIZED_NAME_TYPE_FILTER = "typeFilter";
  @SerializedName(SERIALIZED_NAME_TYPE_FILTER)
  private PricelistPriceListTypeFilter typeFilter;

  public static final String SERIALIZED_NAME_IS_SYSTEM = "isSystem";
  @SerializedName(SERIALIZED_NAME_IS_SYSTEM)
  private Boolean isSystem;

  public ListPriceListsRequestFilter() {
  }

  public ListPriceListsRequestFilter code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public ListPriceListsRequestFilter name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ListPriceListsRequestFilter description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ListPriceListsRequestFilter isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Get isActive
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public ListPriceListsRequestFilter isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Get isDefault
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public ListPriceListsRequestFilter currencyFilter(PricelistCurrencyFilter currencyFilter) {
    this.currencyFilter = currencyFilter;
    return this;
  }

  /**
   * Get currencyFilter
   * @return currencyFilter
   */
  @javax.annotation.Nullable
  public PricelistCurrencyFilter getCurrencyFilter() {
    return currencyFilter;
  }

  public void setCurrencyFilter(PricelistCurrencyFilter currencyFilter) {
    this.currencyFilter = currencyFilter;
  }


  public ListPriceListsRequestFilter vatIncluded(Boolean vatIncluded) {
    this.vatIncluded = vatIncluded;
    return this;
  }

  /**
   * Get vatIncluded
   * @return vatIncluded
   */
  @javax.annotation.Nullable
  public Boolean getVatIncluded() {
    return vatIncluded;
  }

  public void setVatIncluded(Boolean vatIncluded) {
    this.vatIncluded = vatIncluded;
  }


  public ListPriceListsRequestFilter deliveredDutyPaid(Boolean deliveredDutyPaid) {
    this.deliveredDutyPaid = deliveredDutyPaid;
    return this;
  }

  /**
   * Get deliveredDutyPaid
   * @return deliveredDutyPaid
   */
  @javax.annotation.Nullable
  public Boolean getDeliveredDutyPaid() {
    return deliveredDutyPaid;
  }

  public void setDeliveredDutyPaid(Boolean deliveredDutyPaid) {
    this.deliveredDutyPaid = deliveredDutyPaid;
  }


  public ListPriceListsRequestFilter segmentsFilter(PricelistSegmentFilter segmentsFilter) {
    this.segmentsFilter = segmentsFilter;
    return this;
  }

  /**
   * Get segmentsFilter
   * @return segmentsFilter
   */
  @javax.annotation.Nullable
  public PricelistSegmentFilter getSegmentsFilter() {
    return segmentsFilter;
  }

  public void setSegmentsFilter(PricelistSegmentFilter segmentsFilter) {
    this.segmentsFilter = segmentsFilter;
  }


  public ListPriceListsRequestFilter marketsFilter(PricelistMarketFilter marketsFilter) {
    this.marketsFilter = marketsFilter;
    return this;
  }

  /**
   * Get marketsFilter
   * @return marketsFilter
   */
  @javax.annotation.Nullable
  public PricelistMarketFilter getMarketsFilter() {
    return marketsFilter;
  }

  public void setMarketsFilter(PricelistMarketFilter marketsFilter) {
    this.marketsFilter = marketsFilter;
  }


  public ListPriceListsRequestFilter channelsFilter(PricelistChannelFilter channelsFilter) {
    this.channelsFilter = channelsFilter;
    return this;
  }

  /**
   * Get channelsFilter
   * @return channelsFilter
   */
  @javax.annotation.Nullable
  public PricelistChannelFilter getChannelsFilter() {
    return channelsFilter;
  }

  public void setChannelsFilter(PricelistChannelFilter channelsFilter) {
    this.channelsFilter = channelsFilter;
  }


  public ListPriceListsRequestFilter typeFilter(PricelistPriceListTypeFilter typeFilter) {
    this.typeFilter = typeFilter;
    return this;
  }

  /**
   * Get typeFilter
   * @return typeFilter
   */
  @javax.annotation.Nullable
  public PricelistPriceListTypeFilter getTypeFilter() {
    return typeFilter;
  }

  public void setTypeFilter(PricelistPriceListTypeFilter typeFilter) {
    this.typeFilter = typeFilter;
  }


  public ListPriceListsRequestFilter isSystem(Boolean isSystem) {
    this.isSystem = isSystem;
    return this;
  }

  /**
   * Get isSystem
   * @return isSystem
   */
  @javax.annotation.Nullable
  public Boolean getIsSystem() {
    return isSystem;
  }

  public void setIsSystem(Boolean isSystem) {
    this.isSystem = isSystem;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ListPriceListsRequestFilter instance itself
   */
  public ListPriceListsRequestFilter putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListPriceListsRequestFilter listPriceListsRequestFilter = (ListPriceListsRequestFilter) o;
    return Objects.equals(this.code, listPriceListsRequestFilter.code) &&
        Objects.equals(this.name, listPriceListsRequestFilter.name) &&
        Objects.equals(this.description, listPriceListsRequestFilter.description) &&
        Objects.equals(this.isActive, listPriceListsRequestFilter.isActive) &&
        Objects.equals(this.isDefault, listPriceListsRequestFilter.isDefault) &&
        Objects.equals(this.currencyFilter, listPriceListsRequestFilter.currencyFilter) &&
        Objects.equals(this.vatIncluded, listPriceListsRequestFilter.vatIncluded) &&
        Objects.equals(this.deliveredDutyPaid, listPriceListsRequestFilter.deliveredDutyPaid) &&
        Objects.equals(this.segmentsFilter, listPriceListsRequestFilter.segmentsFilter) &&
        Objects.equals(this.marketsFilter, listPriceListsRequestFilter.marketsFilter) &&
        Objects.equals(this.channelsFilter, listPriceListsRequestFilter.channelsFilter) &&
        Objects.equals(this.typeFilter, listPriceListsRequestFilter.typeFilter) &&
        Objects.equals(this.isSystem, listPriceListsRequestFilter.isSystem)&&
        Objects.equals(this.additionalProperties, listPriceListsRequestFilter.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, name, description, isActive, isDefault, currencyFilter, vatIncluded, deliveredDutyPaid, segmentsFilter, marketsFilter, channelsFilter, typeFilter, isSystem, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListPriceListsRequestFilter {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    currencyFilter: ").append(toIndentedString(currencyFilter)).append("\n");
    sb.append("    vatIncluded: ").append(toIndentedString(vatIncluded)).append("\n");
    sb.append("    deliveredDutyPaid: ").append(toIndentedString(deliveredDutyPaid)).append("\n");
    sb.append("    segmentsFilter: ").append(toIndentedString(segmentsFilter)).append("\n");
    sb.append("    marketsFilter: ").append(toIndentedString(marketsFilter)).append("\n");
    sb.append("    channelsFilter: ").append(toIndentedString(channelsFilter)).append("\n");
    sb.append("    typeFilter: ").append(toIndentedString(typeFilter)).append("\n");
    sb.append("    isSystem: ").append(toIndentedString(isSystem)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("isActive");
    openapiFields.add("isDefault");
    openapiFields.add("currencyFilter");
    openapiFields.add("vatIncluded");
    openapiFields.add("deliveredDutyPaid");
    openapiFields.add("segmentsFilter");
    openapiFields.add("marketsFilter");
    openapiFields.add("channelsFilter");
    openapiFields.add("typeFilter");
    openapiFields.add("isSystem");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListPriceListsRequestFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListPriceListsRequestFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListPriceListsRequestFilter is not found in the empty JSON string", ListPriceListsRequestFilter.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `currencyFilter`
      if (jsonObj.get("currencyFilter") != null && !jsonObj.get("currencyFilter").isJsonNull()) {
        PricelistCurrencyFilter.validateJsonElement(jsonObj.get("currencyFilter"));
      }
      // validate the optional field `segmentsFilter`
      if (jsonObj.get("segmentsFilter") != null && !jsonObj.get("segmentsFilter").isJsonNull()) {
        PricelistSegmentFilter.validateJsonElement(jsonObj.get("segmentsFilter"));
      }
      // validate the optional field `marketsFilter`
      if (jsonObj.get("marketsFilter") != null && !jsonObj.get("marketsFilter").isJsonNull()) {
        PricelistMarketFilter.validateJsonElement(jsonObj.get("marketsFilter"));
      }
      // validate the optional field `channelsFilter`
      if (jsonObj.get("channelsFilter") != null && !jsonObj.get("channelsFilter").isJsonNull()) {
        PricelistChannelFilter.validateJsonElement(jsonObj.get("channelsFilter"));
      }
      // validate the optional field `typeFilter`
      if (jsonObj.get("typeFilter") != null && !jsonObj.get("typeFilter").isJsonNull()) {
        PricelistPriceListTypeFilter.validateJsonElement(jsonObj.get("typeFilter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListPriceListsRequestFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListPriceListsRequestFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListPriceListsRequestFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListPriceListsRequestFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<ListPriceListsRequestFilter>() {
           @Override
           public void write(JsonWriter out, ListPriceListsRequestFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ListPriceListsRequestFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ListPriceListsRequestFilter instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListPriceListsRequestFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListPriceListsRequestFilter
   * @throws IOException if the JSON string is invalid with respect to ListPriceListsRequestFilter
   */
  public static ListPriceListsRequestFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListPriceListsRequestFilter.class);
  }

  /**
   * Convert an instance of ListPriceListsRequestFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

