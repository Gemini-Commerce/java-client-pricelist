/*
 * PriceList Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.PricelistCurrency;
import org.openapitools.client.model.PricelistMoney;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce.Pricelist.JSON;

/**
 * PricelistGetPriceListItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-15T16:07:56.394094327Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class PricelistGetPriceListItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_GRN = "grn";
  @SerializedName(SERIALIZED_NAME_GRN)
  private String grn;

  public static final String SERIALIZED_NAME_ITEM_GRN = "itemGrn";
  @SerializedName(SERIALIZED_NAME_ITEM_GRN)
  private String itemGrn;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private PricelistMoney price;

  public static final String SERIALIZED_NAME_DOUBLE_FORMAT_PRICE = "doubleFormatPrice";
  @SerializedName(SERIALIZED_NAME_DOUBLE_FORMAT_PRICE)
  private Double doubleFormatPrice;

  public static final String SERIALIZED_NAME_END_DATE_PRICE = "endDatePrice";
  @SerializedName(SERIALIZED_NAME_END_DATE_PRICE)
  private OffsetDateTime endDatePrice;

  public static final String SERIALIZED_NAME_BASE_PRICE = "basePrice";
  @SerializedName(SERIALIZED_NAME_BASE_PRICE)
  private PricelistMoney basePrice;

  public static final String SERIALIZED_NAME_DOUBLE_FORMAT_BASE_PRICE = "doubleFormatBasePrice";
  @SerializedName(SERIALIZED_NAME_DOUBLE_FORMAT_BASE_PRICE)
  private Double doubleFormatBasePrice;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private PricelistCurrency currency = PricelistCurrency.XXX;

  public static final String SERIALIZED_NAME_HAS_TIER_PRICES = "hasTierPrices";
  @SerializedName(SERIALIZED_NAME_HAS_TIER_PRICES)
  private Boolean hasTierPrices;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public PricelistGetPriceListItem() {
  }

  public PricelistGetPriceListItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PricelistGetPriceListItem grn(String grn) {
    this.grn = grn;
    return this;
  }

  /**
   * Get grn
   * @return grn
   */
  @javax.annotation.Nullable
  public String getGrn() {
    return grn;
  }

  public void setGrn(String grn) {
    this.grn = grn;
  }


  public PricelistGetPriceListItem itemGrn(String itemGrn) {
    this.itemGrn = itemGrn;
    return this;
  }

  /**
   * Get itemGrn
   * @return itemGrn
   */
  @javax.annotation.Nullable
  public String getItemGrn() {
    return itemGrn;
  }

  public void setItemGrn(String itemGrn) {
    this.itemGrn = itemGrn;
  }


  public PricelistGetPriceListItem price(PricelistMoney price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public PricelistMoney getPrice() {
    return price;
  }

  public void setPrice(PricelistMoney price) {
    this.price = price;
  }


  public PricelistGetPriceListItem doubleFormatPrice(Double doubleFormatPrice) {
    this.doubleFormatPrice = doubleFormatPrice;
    return this;
  }

  /**
   * Get doubleFormatPrice
   * @return doubleFormatPrice
   */
  @javax.annotation.Nullable
  public Double getDoubleFormatPrice() {
    return doubleFormatPrice;
  }

  public void setDoubleFormatPrice(Double doubleFormatPrice) {
    this.doubleFormatPrice = doubleFormatPrice;
  }


  public PricelistGetPriceListItem endDatePrice(OffsetDateTime endDatePrice) {
    this.endDatePrice = endDatePrice;
    return this;
  }

  /**
   * Get endDatePrice
   * @return endDatePrice
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDatePrice() {
    return endDatePrice;
  }

  public void setEndDatePrice(OffsetDateTime endDatePrice) {
    this.endDatePrice = endDatePrice;
  }


  public PricelistGetPriceListItem basePrice(PricelistMoney basePrice) {
    this.basePrice = basePrice;
    return this;
  }

  /**
   * Get basePrice
   * @return basePrice
   */
  @javax.annotation.Nullable
  public PricelistMoney getBasePrice() {
    return basePrice;
  }

  public void setBasePrice(PricelistMoney basePrice) {
    this.basePrice = basePrice;
  }


  public PricelistGetPriceListItem doubleFormatBasePrice(Double doubleFormatBasePrice) {
    this.doubleFormatBasePrice = doubleFormatBasePrice;
    return this;
  }

  /**
   * Get doubleFormatBasePrice
   * @return doubleFormatBasePrice
   */
  @javax.annotation.Nullable
  public Double getDoubleFormatBasePrice() {
    return doubleFormatBasePrice;
  }

  public void setDoubleFormatBasePrice(Double doubleFormatBasePrice) {
    this.doubleFormatBasePrice = doubleFormatBasePrice;
  }


  public PricelistGetPriceListItem currency(PricelistCurrency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public PricelistCurrency getCurrency() {
    return currency;
  }

  public void setCurrency(PricelistCurrency currency) {
    this.currency = currency;
  }


  public PricelistGetPriceListItem hasTierPrices(Boolean hasTierPrices) {
    this.hasTierPrices = hasTierPrices;
    return this;
  }

  /**
   * Get hasTierPrices
   * @return hasTierPrices
   */
  @javax.annotation.Nullable
  public Boolean getHasTierPrices() {
    return hasTierPrices;
  }

  public void setHasTierPrices(Boolean hasTierPrices) {
    this.hasTierPrices = hasTierPrices;
  }


  public PricelistGetPriceListItem createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public PricelistGetPriceListItem updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PricelistGetPriceListItem instance itself
   */
  public PricelistGetPriceListItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricelistGetPriceListItem pricelistGetPriceListItem = (PricelistGetPriceListItem) o;
    return Objects.equals(this.id, pricelistGetPriceListItem.id) &&
        Objects.equals(this.grn, pricelistGetPriceListItem.grn) &&
        Objects.equals(this.itemGrn, pricelistGetPriceListItem.itemGrn) &&
        Objects.equals(this.price, pricelistGetPriceListItem.price) &&
        Objects.equals(this.doubleFormatPrice, pricelistGetPriceListItem.doubleFormatPrice) &&
        Objects.equals(this.endDatePrice, pricelistGetPriceListItem.endDatePrice) &&
        Objects.equals(this.basePrice, pricelistGetPriceListItem.basePrice) &&
        Objects.equals(this.doubleFormatBasePrice, pricelistGetPriceListItem.doubleFormatBasePrice) &&
        Objects.equals(this.currency, pricelistGetPriceListItem.currency) &&
        Objects.equals(this.hasTierPrices, pricelistGetPriceListItem.hasTierPrices) &&
        Objects.equals(this.createdAt, pricelistGetPriceListItem.createdAt) &&
        Objects.equals(this.updatedAt, pricelistGetPriceListItem.updatedAt)&&
        Objects.equals(this.additionalProperties, pricelistGetPriceListItem.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, grn, itemGrn, price, doubleFormatPrice, endDatePrice, basePrice, doubleFormatBasePrice, currency, hasTierPrices, createdAt, updatedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricelistGetPriceListItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    grn: ").append(toIndentedString(grn)).append("\n");
    sb.append("    itemGrn: ").append(toIndentedString(itemGrn)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    doubleFormatPrice: ").append(toIndentedString(doubleFormatPrice)).append("\n");
    sb.append("    endDatePrice: ").append(toIndentedString(endDatePrice)).append("\n");
    sb.append("    basePrice: ").append(toIndentedString(basePrice)).append("\n");
    sb.append("    doubleFormatBasePrice: ").append(toIndentedString(doubleFormatBasePrice)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    hasTierPrices: ").append(toIndentedString(hasTierPrices)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("grn");
    openapiFields.add("itemGrn");
    openapiFields.add("price");
    openapiFields.add("doubleFormatPrice");
    openapiFields.add("endDatePrice");
    openapiFields.add("basePrice");
    openapiFields.add("doubleFormatBasePrice");
    openapiFields.add("currency");
    openapiFields.add("hasTierPrices");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PricelistGetPriceListItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PricelistGetPriceListItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PricelistGetPriceListItem is not found in the empty JSON string", PricelistGetPriceListItem.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("grn") != null && !jsonObj.get("grn").isJsonNull()) && !jsonObj.get("grn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grn").toString()));
      }
      if ((jsonObj.get("itemGrn") != null && !jsonObj.get("itemGrn").isJsonNull()) && !jsonObj.get("itemGrn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemGrn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemGrn").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        PricelistMoney.validateJsonElement(jsonObj.get("price"));
      }
      // validate the optional field `basePrice`
      if (jsonObj.get("basePrice") != null && !jsonObj.get("basePrice").isJsonNull()) {
        PricelistMoney.validateJsonElement(jsonObj.get("basePrice"));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        PricelistCurrency.validateJsonElement(jsonObj.get("currency"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PricelistGetPriceListItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PricelistGetPriceListItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PricelistGetPriceListItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PricelistGetPriceListItem.class));

       return (TypeAdapter<T>) new TypeAdapter<PricelistGetPriceListItem>() {
           @Override
           public void write(JsonWriter out, PricelistGetPriceListItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PricelistGetPriceListItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PricelistGetPriceListItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PricelistGetPriceListItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PricelistGetPriceListItem
   * @throws IOException if the JSON string is invalid with respect to PricelistGetPriceListItem
   */
  public static PricelistGetPriceListItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PricelistGetPriceListItem.class);
  }

  /**
   * Convert an instance of PricelistGetPriceListItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

